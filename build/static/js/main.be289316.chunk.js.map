{"version":3,"sources":["components/home/logo.png","components/searchfield/Searchfield.jsx","components/home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Searchfield","state","keyTimer","locations","loading","searchValue","enableSearch","this","className","props","label","value","onChange","event","handleInput","placeholder","style","display","length","visible","type","color","height","width","map","location","onClick","e","handleLocationClick","key","generateId","name","disabled","handleSearchClick","clearTimeout","target","setState","setInterval","loadFromCache","typingTimeout","query","cacheName","cache","JSON","parse","localStorage","getItem","Date","now","timestamp","cacheExpiration","requestLocations","console","log","setItem","stringify","dataUrl","language","axios","get","then","response","entries","data","storeToCache","bind","catch","error","innerText","window","open","Math","random","toString","substr","Component","Home","device","getDevice","getLanguage","addEventListener","handleResize","getClass","src","logo","alt","viewPortWidth","innerWidth","mobileWidth","tabletWidth","browserLanguage","navigator","includes","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be289316.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.38f20377.png\";","import React, { Component } from \"react\";\r\nimport \"./Searchfield.css\";\r\nimport axios from \"axios\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nclass Searchfield extends Component {\r\n  state = {\r\n    keyTimer: null,\r\n    locations: [],\r\n    loading: false,\r\n    searchValue: \"\",\r\n    enableSearch: false\r\n  };\r\n\r\n  render() {\r\n    let state = this.state;\r\n\r\n    return (\r\n      <div className=\"search\">\r\n        <span>{this.props.label}</span>\r\n        <input\r\n          value={state.searchValue}\r\n          onChange={event => {\r\n            this.handleInput(event);\r\n          }}\r\n          placeholder=\"Search\"\r\n        ></input>\r\n        <ul\r\n          style={{\r\n            display:\r\n              state.locations.length || state.loading > 0 ? \"block\" : \"none\"\r\n          }}\r\n        >\r\n          <Loader\r\n            className=\"search-loader\"\r\n            visible={state.loading}\r\n            type=\"ThreeDots\"\r\n            color=\"#00BFFF\"\r\n            height={50}\r\n            width={50}\r\n          ></Loader>\r\n          {state.locations.map(location => {\r\n            return (\r\n              <li\r\n                onClick={e => {\r\n                  this.handleLocationClick(e);\r\n                }}\r\n                key={this.generateId()}\r\n              >\r\n                {location.name}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n        <button\r\n          disabled={!state.enableSearch}\r\n          className=\"btn btn-primary\"\r\n          onClick={e => this.handleSearchClick(e)}\r\n        >\r\n          Click to search\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleInput(e) {\r\n    clearTimeout(this.state.keyTimer);\r\n\r\n    let value = e.target.value;\r\n\r\n    this.setState({ searchValue: value });\r\n    if (value) {\r\n      let keyTimer = setInterval(() => {\r\n        clearTimeout(this.state.keyTimer);\r\n        this.loadFromCache(value);\r\n      }, this.props.typingTimeout);\r\n      this.setState({ keyTimer });\r\n    } else {\r\n      this.setState({ locations: [], enableSearch: false });\r\n    }\r\n  }\r\n\r\n  loadFromCache(query) {\r\n    let cacheName = this.props.cacheName,\r\n      cache = JSON.parse(localStorage.getItem(cacheName)) || {};\r\n\r\n    if (query in cache) {\r\n      if (Date.now() - cache[query].timestamp > this.props.cacheExpiration) {\r\n        this.requestLocations(query);\r\n      } else {\r\n        this.setState({ locations: cache[query].locations });\r\n        console.log(\"Served from cache!\");\r\n      }\r\n    } else {\r\n      this.requestLocations(query);\r\n    }\r\n  }\r\n\r\n  storeToCache(query, locations) {\r\n    let cacheName = this.props.cacheName,\r\n      cache = JSON.parse(localStorage.getItem(cacheName)) || {};\r\n\r\n    cache[query] = { locations: locations, timestamp: Date.now() };\r\n    localStorage.setItem(cacheName, JSON.stringify(cache));\r\n  }\r\n\r\n  requestLocations(query) {\r\n    let dataUrl = this.props.dataUrl,\r\n      language = this.props.language;\r\n\r\n    if (query.length >= 2) {\r\n      this.setState({ loading: true });\r\n      axios\r\n        .get(`${dataUrl}?keywords=${query}&language=${language}`)\r\n        .then(\r\n          function(query, response) {\r\n            let entries = response.data.entries;\r\n\r\n            this.setState({ locations: entries, loading: false });\r\n            this.storeToCache(query, entries);\r\n          }.bind(this, query)\r\n        )\r\n        .catch(function(error) {\r\n          console.error(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  handleLocationClick(e) {\r\n    let location = e.target.innerText;\r\n\r\n    this.setState({ searchValue: location, enableSearch: true });\r\n  }\r\n\r\n  handleSearchClick() {\r\n    window.open(`https://www.google.com.tr/search?q=${this.state.searchValue}`);\r\n  }\r\n\r\n  generateId() {\r\n    return Math.random()\r\n      .toString(36)\r\n      .substr(2, 9);\r\n  }\r\n}\r\n\r\nexport default Searchfield;\r\n","import React, { Component } from \"react\";\r\nimport logo from \"./logo.png\";\r\nimport \"./Home.css\";\r\nimport Searchfield from \"../searchfield/Searchfield\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    device: this.getDevice(),\r\n    language: this.getLanguage()\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", e => {\r\n      this.handleResize(e);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.getClass()}>\r\n        <div\r\n          style={{\r\n            display: this.state.device === \"desktop\" ? \"block\" : \"none\"\r\n          }}\r\n          className=\"home-banner-desktop\"\r\n        >\r\n          <span className=\"home-banner-span\">Banner Space</span>\r\n        </div>\r\n        <img className=\"app-logo\" src={logo} alt=\"logo\" />\r\n        <Searchfield\r\n          dataUrl=\"http://35.180.182.8/search\"\r\n          typingTimeout={1 * 1000} //1 sec\r\n          label=\"What place are you looking for?\"\r\n          language={this.state.language}\r\n          cacheName=\"xe-app-queries\"\r\n          cacheExpiration={5 * 60 * 1000} //5 mins\r\n        ></Searchfield>\r\n        <div\r\n          style={{ display: this.state.device === \"tablet\" ? \"block\" : \"none\" }}\r\n          className=\"home-banner-tablet\"\r\n        >\r\n          <span className=\"home-banner-span\">Banner Space</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleResize(e) {\r\n    this.setState({ device: this.getDevice() });\r\n  }\r\n\r\n  getDevice() {\r\n    let viewPortWidth = window.innerWidth,\r\n      mobileWidth = window.mobileWidth,\r\n      tabletWidth = window.tabletWidth;\r\n\r\n    if (mobileWidth < viewPortWidth && viewPortWidth <= tabletWidth) {\r\n      return \"tablet\";\r\n    } else if (viewPortWidth <= mobileWidth) {\r\n      return \"mobile\";\r\n    } else {\r\n      return \"desktop\";\r\n    }\r\n  }\r\n\r\n  getClass() {\r\n    switch (this.state.device) {\r\n      case \"desktop\":\r\n        return \"home-desktop\";\r\n      case \"tablet\":\r\n        return \"home-tablet\";\r\n      case \"mobile\":\r\n        return \"home-mobile\";\r\n      default:\r\n        return \"home-desktop\";\r\n    }\r\n  }\r\n\r\n  getLanguage() {\r\n    let browserLanguage = navigator.language;\r\n\r\n    if (browserLanguage.includes(\"el\")) {\r\n      return \"el\";\r\n    } else if (browserLanguage.includes(\"en\")) {\r\n      return \"en\";\r\n    } else {\r\n      return \"en\";\r\n    }\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Home from \"./components/home/Home\";\r\n\r\nfunction App() {\r\n  window.mobileWidth = 640;\r\n  window.tabletWidth = 1024;\r\n\r\n  return <Home></Home>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}